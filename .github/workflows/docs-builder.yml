---
name: "docs-builder"

on:
  repository_dispatch:
    types: [docs-builder]
  workflow_dispatch:
  push:
    paths:
      - "Dockerfile"
      - "docs.conf"
    branches:
      - "main"

permissions:
  id-token: write
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:

  init:
    name: Job Init
    runs-on: self-hosted
    outputs:
      action: ${{ steps.init.outputs.action }}
    steps:
      - id: init
        name: ${{ github.ref_name }}
        shell: bash
        run: |
          if [[ -n "${{ secrets.ACR_LOGIN_SERVER }}" ]]
          then
            if [[ -n "${{ secrets.ACR_LOGIN_SERVER }}" ]] && dig "${{ secrets.ACR_LOGIN_SERVER }}" +short > /dev/null 2>&1
            then
              echo 'action=build' >> "${GITHUB_OUTPUT}"
            else
              echo 'action=skip' >> "${GITHUB_OUTPUT}"
              echo "Error: ACR_LOGIN_SERVER is not a valid or resolvable DNS entry" >&2
              exit 1
            fi
          else
            echo 'action=skip' >> "${GITHUB_OUTPUT}"
          fi

  increment-version:
    name: Increment Version
    if: needs.init.outputs.action == 'build'
    needs: [init]
    runs-on: self-hosted
    outputs:
      new_version: ${{ steps.set_version.outputs.new_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871

      - name: Fetch Version Branch
        run: |
          git fetch origin version || git checkout -b version
          git checkout version || git checkout -b version

      - name: Microsoft Azure Authentication
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302
        with:
          allow-no-subscriptions: true
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        uses: azure/docker-login@15c4aadf093404726ab2ff205b2cdd33fa6d054c
        with:
          login-server: "${{ secrets.ACR_LOGIN_SERVER }}"
          username: ${{ secrets.ARM_CLIENT_ID }}
          password: ${{ secrets.ARM_CLIENT_SECRET }}

      - name: Check if VERSION file exists
        id: version
        run: |
          # Check if VERSION file exists
          if [ -f VERSION ]; then
            VERSION=$(cat VERSION)
            IFS='.' read -r major minor patch <<< "$VERSION"
            LATEST_VERSION="${major}.${minor}.${patch}"
            ((patch++))
            NEW_VERSION="${major}.${minor}.${patch}"
          else
            LATEST_VERSION="0.0.0"
            NEW_VERSION="0.0.0"
          fi
          echo "latest_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Check if repository exists and get latest tag
        id: tag
        run: |
          REPO_NAME="docs"
          ACR_NAME=${{ secrets.ACR_LOGIN_SERVER }}

          # Get the most recent tag excluding 'latest'
          LATEST_TAG=$(az acr repository show-tags --name "$ACR_NAME" --repository "$REPO_NAME" --orderby time_desc --output tsv | grep -v '^latest$' | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            echo "No existing tags found, defaulting to 0.0.0"
            LATEST_TAG="0.0.0"
          fi

          # Increment version (assuming semantic versioning)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="$MAJOR.$MINOR.$NEW_PATCH"

          # Set output for next steps
          echo "latest_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Compare latest tag to version
        id: set_version
        run: |
          # Parse latest_version and latest_tag
          LATEST_VERSION="${{ steps.version.outputs.latest_version }}"
          LATEST_TAG="${{ steps.tag.outputs.latest_tag }}"

          # Function to compare two semantic versions
          version_greater_or_equal() {
            # Returns 0 if version1 >= version2, otherwise returns 1
            [ "$1" = "$2" ] && return 0
            local IFS=.
            local i version1=($1) version2=($2)
            for ((i=0; i<${#version1[@]}; i++)); do
              if [[ -z "${version2[i]}" ]]; then
                version2[i]=0
              fi
              if ((10#${version1[i]} > 10#${version2[i]})); then
                return 0
              elif ((10#${version1[i]} < 10#${version2[i]})); then
                return 1
              fi
            done
            return 0
          }

          # Determine which version is greater
          if version_greater_or_equal "$LATEST_VERSION" "$LATEST_TAG"; then
            FINAL_VERSION="$LATEST_VERSION"
          else
            FINAL_VERSION="$LATEST_TAG"
          fi

          # Set the new version output
          echo "new_version=$FINAL_VERSION" >> $GITHUB_OUTPUT

  build:
    name: Build and Push Container
    if: success()
    runs-on: self-hosted
    needs: [increment-version, init]
    env:
      new_version: ${{ needs.increment-version.outputs.new_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871

      - name: Microsoft Azure Authentication
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302
        with:
          allow-no-subscriptions: true
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        uses: azure/docker-login@15c4aadf093404726ab2ff205b2cdd33fa6d054c
        with:
          login-server: "${{ secrets.ACR_LOGIN_SERVER }}"
          username: ${{ secrets.ARM_CLIENT_ID }}
          password: ${{ secrets.ARM_CLIENT_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349

      - name: setup ssh config
        shell: bash
        run: |
          mkdir -p ~/.ssh
          cat << EOF > ~/.ssh/config
          Host xxx
            HostName github.com
            User git
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
          EOF

      - name: Create Temporary Directory
        id: create-temp-dir
        run: |
          TEMP_DIR=$(mktemp -d)
          echo "TEMP_DIR=$TEMP_DIR" >> $GITHUB_ENV

      - name: Clone Landing Page
        shell: bash
        run: |
          mkdir $TEMP_DIR/landing-page
          #git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository_owner }}/landing-page $TEMP_DIR/landing-page/docs
          git clone https://${{ secrets.GITHUB_TOKEN }}:@github.com/${{ github.repository_owner }}/landing-page $TEMP_DIR/landing-page/docs

      - name: Link mkdocs.yml
        shell: bash
        run: |
          echo 'site_name: "Hands on Labs"' > $TEMP_DIR/landing-page/mkdocs.yml
          echo 'INHERIT: docs/theme/mkdocs.yml' > $TEMP_DIR/landing-page/mkdocs.yml

      - name: Clone Theme
        shell: bash
        run: |
          if [ -f ~/.ssh/id_ed25519 ]; then chmod 600 ~/.ssh/id_ed25519; fi
          echo '${{ secrets.THEME_SSH_PRIVATE_KEY}}' > ~/.ssh/id_ed25519 && chmod 400 ~/.ssh/id_ed25519
          git clone git@github.com:${{ github.repository_owner }}/theme.git $TEMP_DIR/landing-page/docs/theme
          docker run --rm -v $TEMP_DIR/landing-page:/docs ${{ secrets.MKDOCS_REPO_NAME }} build -c -d site/
          mkdir -p $TEMP_DIR/build/
          cp -a $TEMP_DIR/landing-page/site $TEMP_DIR/build/

      - name: Clone Content Repos
        shell: bash
        run: |
          mkdir -p $TEMP_DIR/src/cloud
          if [ -f ~/.ssh/id_ed25519 ]; then chmod 600 ~/.ssh/id_ed25519; fi
          echo '${{ secrets.CLOUD_SSH_PRIVATE_KEY }}' > ~/.ssh/id_ed25519 && chmod 400 ~/.ssh/id_ed25519
          git clone git@github.com:${{ github.repository_owner }}/cloud.git $TEMP_DIR/src/cloud/docs
          echo '# Hands on Labs' > $TEMP_DIR/src/cloud/docs/index.md
          cp -a $TEMP_DIR/landing-page/docs/theme $TEMP_DIR/src/cloud/docs/
          echo 'site_name: "Hands on Labs"' > $TEMP_DIR/src/cloud/mkdocs.yml
          echo 'INHERIT: docs/theme/mkdocs.yml' >> $TEMP_DIR/src/cloud/mkdocs.yml
          docker run --rm -v $TEMP_DIR/src/cloud:/docs ${{ secrets.MKDOCS_REPO_NAME }} build -d site/
          mv $TEMP_DIR/src/cloud/site $TEMP_DIR/build/site/cloud

          mkdir -p $TEMP_DIR/src/ot
          if [ -f ~/.ssh/id_ed25519 ]; then chmod 600 ~/.ssh/id_ed25519; fi
          echo '${{ secrets.OT_SSH_PRIVATE_KEY }}' > ~/.ssh/id_ed25519 && chmod 400 ~/.ssh/id_ed25519
          git clone git@github.com:${{ github.repository_owner }}/ot.git $TEMP_DIR/src/ot/docs
          echo '# Hands on Labs' > $TEMP_DIR/src/ot/docs/index.md
          cp -a $TEMP_DIR/landing-page/docs/theme $TEMP_DIR/src/ot/docs/
          echo 'site_name: "Hands on Labs"' > $TEMP_DIR/src/ot/mkdocs.yml
          echo 'INHERIT: docs/theme/mkdocs.yml' >> $TEMP_DIR/src/ot/mkdocs.yml
          docker run --rm -v $TEMP_DIR/src/ot:/docs ${{ secrets.MKDOCS_REPO_NAME }} build -d site/
          mv $TEMP_DIR/src/ot/site $TEMP_DIR/build/site/ot

          mkdir -p $TEMP_DIR/src/secops
          if [ -f ~/.ssh/id_ed25519 ]; then chmod 600 ~/.ssh/id_ed25519; fi
          echo '${{ secrets.SECOPS_SSH_PRIVATE_KEY }}' > ~/.ssh/id_ed25519 && chmod 400 ~/.ssh/id_ed25519
          git clone git@github.com:${{ github.repository_owner }}/secops.git $TEMP_DIR/src/secops/docs
          echo '# Hands on Labs' > $TEMP_DIR/src/secops/docs/index.md
          cp -a $TEMP_DIR/landing-page/docs/theme $TEMP_DIR/src/secops/docs/
          echo 'site_name: "Hands on Labs"' > $TEMP_DIR/src/secops/mkdocs.yml
          echo 'INHERIT: docs/theme/mkdocs.yml' >> $TEMP_DIR/src/secops/mkdocs.yml
          docker run --rm -v $TEMP_DIR/src/secops:/docs ${{ secrets.MKDOCS_REPO_NAME }} build -d site/
          mv $TEMP_DIR/src/secops/site $TEMP_DIR/build/site/secops

          mkdir -p $TEMP_DIR/src/sase
          if [ -f ~/.ssh/id_ed25519 ]; then chmod 600 ~/.ssh/id_ed25519; fi
          echo '${{ secrets.SASE_SSH_PRIVATE_KEY }}' > ~/.ssh/id_ed25519 && chmod 400 ~/.ssh/id_ed25519
          git clone git@github.com:${{ github.repository_owner }}/sase.git $TEMP_DIR/src/sase/docs
          echo '# Hands on Labs' > $TEMP_DIR/src/sase/docs/index.md
          cp -a $TEMP_DIR/landing-page/docs/theme $TEMP_DIR/src/sase/docs/
          echo 'site_name: "Hands on Labs"' > $TEMP_DIR/src/sase/mkdocs.yml
          echo 'INHERIT: docs/theme/mkdocs.yml' >> $TEMP_DIR/src/sase/mkdocs.yml
          docker run --rm -v $TEMP_DIR/src/sase:/docs ${{ secrets.MKDOCS_REPO_NAME }} build -d site/
          mv $TEMP_DIR/src/sase/site $TEMP_DIR/build/site/sase

          mkdir -p $TEMP_DIR/src/references
          if [ -f ~/.ssh/id_ed25519 ]; then chmod 600 ~/.ssh/id_ed25519; fi
          echo '${{ secrets.REFERENCES_SSH_PRIVATE_KEY }}' > ~/.ssh/id_ed25519 && chmod 400 ~/.ssh/id_ed25519
          git clone git@github.com:${{ github.repository_owner }}/references.git $TEMP_DIR/src/references/docs
          echo '# Hands on Labs' > $TEMP_DIR/src/references/docs/index.md
          cp -a $TEMP_DIR/landing-page/docs/theme $TEMP_DIR/src/references/docs/
          echo 'site_name: "Hands on Labs"' > $TEMP_DIR/src/references/mkdocs.yml
          echo 'INHERIT: docs/theme/mkdocs.yml' >> $TEMP_DIR/src/references/mkdocs.yml
          docker run --rm -v $TEMP_DIR/src/references:/docs ${{ secrets.MKDOCS_REPO_NAME }} build -d site/
          mv $TEMP_DIR/src/references/site $TEMP_DIR/build/site/references

      - name: Copy Workdir to TEMP_DIR
        run: |
          cp -a $GITHUB_WORKSPACE/* $TEMP_DIR/build

      - name: Create htaccess password
        run: |
          htpasswd -b -c $TEMP_DIR/build/.htpasswd ${{ secrets.DOCS_USERNAME }} ${{ secrets.HTPASSWD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75
        with:
          context: ${{ env.TEMP_DIR }}/build
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/docs:${{ env.new_version }},${{ secrets.ACR_LOGIN_SERVER }}/docs:latest

  update-version-branch:
    name: Update Version Branch
    needs: [init, increment-version, build]
    runs-on: self-hosted
    if: success()
    env:
      new_version: ${{ needs.increment-version.outputs.new_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871

      - name: Setup Git Configuration
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch Version Branch or Create It
        run: |
          git fetch origin
          if git show-ref --quiet refs/remotes/origin/version; then
            git checkout -B version origin/version
          else
            git checkout -b version
          fi

      - name: Update VERSION File
        run: |
          echo "${{ env.new_version }}" > VERSION

      - name: Commit and Push Changes
        run: |
          git add VERSION
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit"
          else
            git commit -m "Increment version to ${{ env.new_version }}"
            git push -u origin version --force-with-lease  # Force push but only if remote hasn't changed
          fi

  dispatch-manifest-update:
    name: Dispatch Manifest Update
    needs: [init, increment-version, build, update-version-branch]
    runs-on: self-hosted
    if: success()
    env:
      new_version: ${{ needs.increment-version.outputs.new_version }}
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.repository_owner }}/${{ secrets.APPLICATIONS_MANIFESTS_REPO_NAME }}
          event-type: update-manifest
          client-payload: |-
            {
              "type": "applications",
              "name": "docs",
              "file": "Deployment.yaml",
              "spec": ".spec.template.spec.containers[0].image",
              "value": "${{ secrets.ACR_LOGIN_SERVER }}/docs:${{ env.new_version }}"
            }
