---
name: "docs-builder"

on:
  repository_dispatch:
    types: [docs-builder]
  workflow_dispatch:
  push:
    branches:
      - "main"

permissions:
  id-token: write
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:

  init:
    name: Job Init
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.init.outputs.action }}
    steps:
      - id: init
        name: ${{ github.ref_name }}
        shell: bash
        run: |
          if [[ -n "${{ secrets.ACR_LOGIN_SERVER }}" ]]
          then
            if [[ -n "${{ secrets.ACR_LOGIN_SERVER }}" ]] && dig "${{ secrets.ACR_LOGIN_SERVER }}" +short > /dev/null 2>&1
            then
              echo 'action=build' >> "${GITHUB_OUTPUT}"
            else
              echo 'action=skip' >> "${GITHUB_OUTPUT}"
              echo "Error: ACR_LOGIN_SERVER is not a valid or resolvable DNS entry" >&2
              exit 1
            fi
          else
            echo 'action=skip' >> "${GITHUB_OUTPUT}"
          fi

  increment-version:
    name: Increment Version
    if: needs.init.outputs.action == 'build'
    needs: [init]
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set_version.outputs.new_version }}
    steps:

      - name: Microsoft Azure Authentication
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302
        with:
          allow-no-subscriptions: true
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        uses: azure/docker-login@15c4aadf093404726ab2ff205b2cdd33fa6d054c
        with:
          login-server: "${{ secrets.ACR_LOGIN_SERVER }}"
          username: ${{ secrets.ARM_CLIENT_ID }}
          password: ${{ secrets.ARM_CLIENT_SECRET }}

      - name: Read VERSION variable
        id: version
        run: |
          if [ -z "${{ vars.VERSION }}" ]; then
            LATEST_VERSION=0.0.0
            NEW_VERSION="0.0.0"
          else
            VERSION="${{ vars.VERSION }}"
            IFS='.' read -r major minor patch <<< "$VERSION"
            LATEST_VERSION="${major}.${minor}.${patch}"
            ((patch++))
            NEW_VERSION="${major}.${minor}.${patch}"
          fi
          echo "latest_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Check if repository exists and get latest tag
        id: tag
        run: |
          REPO_NAME="docs"
          ACR_NAME=${{ secrets.ACR_LOGIN_SERVER }}

          # Get the most recent tag excluding 'latest'
          LATEST_TAG=$(az acr repository show-tags --name "$ACR_NAME" --repository "$REPO_NAME" --orderby time_desc --output tsv | grep -v '^latest$' | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            echo "No existing tags found, defaulting to 0.0.0"
            LATEST_TAG="0.0.0"
          fi

          # Increment version (assuming semantic versioning)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="$MAJOR.$MINOR.$NEW_PATCH"

          # Set output for next steps
          echo "latest_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Compare latest tag to version
        id: set_version
        run: |
          # Parse latest_version and latest_tag
          LATEST_VERSION="${{ steps.version.outputs.latest_version }}"
          LATEST_TAG="${{ steps.tag.outputs.latest_tag }}"

          # Function to compare two semantic versions
          version_greater_or_equal() {
            # Returns 0 if version1 >= version2, otherwise returns 1
            [ "$1" = "$2" ] && return 0
            local IFS=.
            local i version1=($1) version2=($2)
            for ((i=0; i<${#version1[@]}; i++)); do
              if [[ -z "${version2[i]}" ]]; then
                version2[i]=0
              fi
              if ((10#${version1[i]} > 10#${version2[i]})); then
                return 0
              elif ((10#${version1[i]} < 10#${version2[i]})); then
                return 1
              fi
            done
            return 0
          }

          # Determine which version is greater
          if version_greater_or_equal "$LATEST_VERSION" "$LATEST_TAG"; then
            FINAL_VERSION="$LATEST_VERSION"
          else
            FINAL_VERSION="$LATEST_TAG"
          fi

          # Set the new version output
          echo "new_version=$FINAL_VERSION" >> $GITHUB_OUTPUT

  build:
    name: Build and Push Container
    if: success()
    runs-on: ubuntu-latest
    needs: [increment-version, init]
    env:
      new_version: ${{ needs.increment-version.outputs.new_version }}
    steps:
      - name: Clone Repo
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871

      - name: Microsoft Azure Authentication
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302
        with:
          allow-no-subscriptions: true
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        uses: azure/docker-login@15c4aadf093404726ab2ff205b2cdd33fa6d054c
        with:
          login-server: "${{ secrets.ACR_LOGIN_SERVER }}"
          username: ${{ secrets.ARM_CLIENT_ID }}
          password: ${{ secrets.ARM_CLIENT_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5

      - name: Create Temporary Directory
        id: create-temp-dir
        run: |
          TEMP_DIR=$(mktemp -d -p "${RUNNER_WORKSPACE}/docs-builder")
          echo "TEMP_DIR=$TEMP_DIR" >> $GITHUB_ENV
          mkdir -p $TEMP_DIR
          mkdir -p $TEMP_DIR/src/cloud
          mkdir -p $TEMP_DIR/src/ot
          mkdir -p $TEMP_DIR/src/secops
          mkdir -p $TEMP_DIR/src/sase
          mkdir -p $TEMP_DIR/build/
          mkdir -p $TEMP_DIR/site
          chmod -R 777 $TEMP_DIR

      - name: Clone Theme
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871
        with:
          repository: ${{ github.repository_owner }}/theme
          token: ${{ secrets.PAT }} 
          path: ${{ env.TEMP_DIR }}/src/theme

      - name: Clone Landing Page
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871
        with:
          repository: ${{ github.repository_owner }}/landing-page
          token: ${{ secrets.PAT }} 
          path: ${{ env.TEMP_DIR }}/src/landing-page
          fetch-depth: 0

      - name: Clone cloud
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871
        with:
          repository: ${{ github.repository_owner }}/cloud
          token: ${{ secrets.PAT }} 
          path: ${{ env.TEMP_DIR }}/src/cloud
          fetch-depth: 0

      - name: Clone ot
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871
        with:
          repository: ${{ github.repository_owner }}/ot
          token: ${{ secrets.PAT }} 
          path: ${{ env.TEMP_DIR }}/src/ot
          fetch-depth: 0

      - name: Clone secops
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871
        with:
          repository: ${{ github.repository_owner }}/secops
          token: ${{ secrets.PAT }} 
          path: ${{ env.TEMP_DIR }}/src/secops
          fetch-depth: 0

      - name: Clone sase
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871
        with:
          repository: ${{ github.repository_owner }}/sase
          token: ${{ secrets.PAT }} 
          path: ${{ env.TEMP_DIR }}/src/sase
          fetch-depth: 0

      - name: Build HTML
        shell: bash
        run: |
          cp -a $TEMP_DIR/src/theme $TEMP_DIR/src/landing-page/
          docker run --rm --user $(id -u):$(id -g) -e MKDOCS_SITE_DIR="site/rendered" -e MKDOCS_HOMEPAGE="https://docs.${{ vars.DNS_ZONE }}" -e MKDOCS_SITE_NAME="Hands on Labs" -e MKDOCS_EXPORTER_PDF_ENABLED="false" -v $TEMP_DIR/src/landing-page:/tmp/docs -v $TEMP_DIR/site/:/tmp/site/ ${{ vars.MKDOCS_REPO_NAME }}
          mv $TEMP_DIR/site/rendered/ $TEMP_DIR/build/site

          cp -a $TEMP_DIR/src/theme $TEMP_DIR/src/cloud/
          mv $TEMP_DIR/src/cloud/theme/partials/tabs-cloud.html $TEMP_DIR/src/cloud/theme/partials/tabs.html
          docker run --rm --user $(id -u):$(id -g) -e MKDOCS_HOMEPAGE="https://docs.${{ vars.DNS_ZONE }}" -e MKDOCS_SITE_NAME="Cloud Hands on Labs" -e MKDOCS_SITE_URL="https://docs.${{ vars.DNS_ZONE }}/cloud/" -e MKDOCS_EXPORTER_PDF_ENABLED="false" -e PLAYWRIGHT_BROWSERS_PATH="/ms-playwright" -v $TEMP_DIR/src/cloud:/tmp/docs -v $TEMP_DIR/site/:/tmp/site/ ${{ vars.MKDOCS_REPO_NAME }} build -c
          mv $TEMP_DIR/site $TEMP_DIR/build/site/cloud

          cp -a $TEMP_DIR/src/theme $TEMP_DIR/src/ot/
          mv $TEMP_DIR/src/ot/theme/partials/tabs-ot.html $TEMP_DIR/src/ot/theme/partials/tabs.html
          docker run --rm --user $(id -u):$(id -g) -e MKDOCS_HOMEPAGE="https://docs.${{ vars.DNS_ZONE }}" -e MKDOCS_SITE_NAME="OT Hands on Labs" -e MKDOCS_SITE_URL="https://docs.${{ vars.DNS_ZONE }}/ot/" -e MKDOCS_EXPORTER_PDF_ENABLED="false" -e PLAYWRIGHT_BROWSERS_PATH="/ms-playwright" -v $TEMP_DIR/src/ot:/tmp/docs -v $TEMP_DIR/site/:/tmp/site/ ${{ vars.MKDOCS_REPO_NAME }} build -c
          mv $TEMP_DIR/site $TEMP_DIR/build/site/ot

          cp -a $TEMP_DIR/src/theme $TEMP_DIR/src/secops/
          mv $TEMP_DIR/src/secops/theme/partials/tabs-secops.html $TEMP_DIR/src/secops/theme/partials/tabs.html
          docker run --rm --user $(id -u):$(id -g) -e MKDOCS_HOMEPAGE="https://docs.${{ vars.DNS_ZONE }}" -e MKDOCS_SITE_NAME="SecOps Hands on Labs" -e MKDOCS_SITE_URL="https://docs.${{ vars.DNS_ZONE }}/secops/" -e MKDOCS_EXPORTER_PDF_ENABLED="false" -e PLAYWRIGHT_BROWSERS_PATH="/ms-playwright" -v $TEMP_DIR/src/secops:/tmp/docs -v $TEMP_DIR/site/:/tmp/site/ ${{ vars.MKDOCS_REPO_NAME }} build -c
          mv $TEMP_DIR/site $TEMP_DIR/build/site/secops

          cp -a $TEMP_DIR/src/theme $TEMP_DIR/src/sase/
          mv $TEMP_DIR/src/sase/theme/partials/tabs-sase.html $TEMP_DIR/src/sase/theme/partials/tabs.html
          docker run --rm --user $(id -u):$(id -g) -e MKDOCS_HOMEPAGE="https://docs.${{ vars.DNS_ZONE }}" -e MKDOCS_SITE_NAME="SASE Hands on Labs" -e MKDOCS_SITE_URL="https://docs.${{ vars.DNS_ZONE }}/sase/" -e MKDOCS_EXPORTER_PDF_ENABLED="false" -e PLAYWRIGHT_BROWSERS_PATH="/ms-playwright" -v $TEMP_DIR/src/sase:/tmp/docs -v $TEMP_DIR/site/:/tmp/site/ ${{ vars.MKDOCS_REPO_NAME }} build -c
          mv $TEMP_DIR/site $TEMP_DIR/build/site/sase

      - name: Create PDF
        run: |
          TARGET_DIRS=("cloud" "ot" "secops" "sase")
          for target in "${TARGET_DIRS[@]}"; do
            TARGET_DIR="$TEMP_DIR/src/${target}/"
            find "$TARGET_DIR" -mindepth 1 -maxdepth 1 -type d ! -name ".vscode" ! -name "theme" ! -name ".git" ! -name ".github" ! -name "images" | while read -r folder; do
              folder_name=$(basename "$folder")
              cp -a $TEMP_DIR/src/theme "$TEMP_DIR/src/${target}/${folder_name}/"
              mv "$TEMP_DIR/src/${target}/${folder_name}/" "$TEMP_DIR/src/${target}/docs/"
              NORMALIZED_NAME="${folder_name//-/ }"
              NORMALIZED_NAME=$(echo "$NORMALIZED_NAME" | sed -E 's/\b(.)/\U\1/g')
              docker run --rm --user $(id -u):$(id -g) \
                -e MKDOCS_HOMEPAGE="https://docs.${{ vars.DNS_ZONE }}" \
                -e MKDOCS_PDF_FILENAME="${folder_name}.pdf" \
                -e MKDOCS_SITE_NAME="${NORMALIZED_NAME}" \
                -e MKDOCS_SITE_URL="https://docs.${{ vars.DNS_ZONE }}/${target}/" \
                -e CUSTOM_DIR="theme" \
                -e MKDOCS_EXPORTER_PDF_ENABLED="true" \
                -e PLAYWRIGHT_BROWSERS_PATH="/ms-playwright" \
                -v "$TEMP_DIR/src/${target}/${folder_name}:/tmp/docs" \
                -v "$TEMP_DIR/site:/tmp/site" \
                ${{ vars.MKDOCS_REPO_NAME }} build -c
              mv "$TEMP_DIR/site/${folder_name}.pdf" "$TEMP_DIR/build/site/${target}/${folder_name}/"
            done
          done

      - name: Copy Workdir to TEMP_DIR
        run: |
          cp -a $GITHUB_WORKSPACE/Dockerfile $TEMP_DIR/build

      - name: Build and Push Docker Image
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          context: ${{ env.TEMP_DIR }}/build
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/docs:${{ env.new_version }},${{ secrets.ACR_LOGIN_SERVER }}/docs:latest

  update-version-branch:
    name: Update Version Branch
    needs: [init, increment-version, build]
    runs-on: ubuntu-latest
    if: success()
    env:
      new_version: ${{ needs.increment-version.outputs.new_version }}
    steps:

      - name: Set VERSION variable 
        uses: action-pack/set-variable@c745021a3a403ab9cc351b4aabe3e528f22d9937
        with:
          name: 'VERSION'
          value: "${{ env.new_version }}"
          token: ${{ secrets.PAT }}

      - name: Set VERSION variable 
        uses: action-pack/set-variable@c745021a3a403ab9cc351b4aabe3e528f22d9937
        with:
          name: 'DOCS_VERSION'
          value: "${{ env.new_version }}"
          token: ${{ secrets.PAT }}
          repository: ${{ vars.MANIFESTS_APPLICATIONS_REPO_NAME }}

  dispatch-manifest-update:
    name: Dispatch Manifest Update
    needs: [init, increment-version, build, update-version-branch]
    runs-on: ubuntu-latest
    if: success()
    env:
      new_version: ${{ needs.increment-version.outputs.new_version }}
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.repository_owner }}/${{ vars.MANIFESTS_APPLICATIONS_REPO_NAME }}
          event-type: docs-version
