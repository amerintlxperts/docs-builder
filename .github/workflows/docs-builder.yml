name: "docs-builder"

on:
  repository_dispatch:
    types: [docs-builder]
  workflow_dispatch:
  push:
    paths:
      - "Dockerfile"
      - "docs.conf"
    branches:
      - "main"

permissions:
  id-token: write
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  increment-version:
    name: Increment Version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set_version.outputs.new_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871

      - name: Setup Git Configuration
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch Version Branch
        run: |
          git fetch origin version:version || git checkout -b version
          git checkout version

      - name: Increment VERSION File
        id: set_version
        run: |
          # Check if VERSION file exists
          if [ -f VERSION ]; then
            VERSION=$(cat VERSION)
            if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Invalid VERSION format. Exiting."
              exit 1
            fi
            IFS='.' read -r major minor patch <<< "$VERSION"
            ((patch++))
            NEW_VERSION="${major}.${minor}.${patch}"
          else
            NEW_VERSION="0.0.1"
          fi
          echo "$NEW_VERSION" > VERSION
          echo "::set-output name=new_version::$NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

  build:
    name: Build and Manage Version
    if: needs.init.outputs.action == 'build'
    runs-on: ubuntu-latest
    needs: [increment-version, init]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871

      - name: Microsoft Azure Authentication
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302
        with:
          allow-no-subscriptions: true
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        uses: azure/docker-login@15c4aadf093404726ab2ff205b2cdd33fa6d054c
        with:
          login-server: "${{ secrets.ACR_LOGIN_SERVER }}"
          username: ${{ secrets.ARM_CLIENT_ID }}
          password: ${{ secrets.ARM_CLIENT_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349

      - name: Build and Push Docker Image
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75
        with:
          context: ${{ github.workspace }}
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/docs:${{ needs.increment-version.outputs.new_version }},${{ secrets.ACR_LOGIN_SERVER }}/docs:latest

      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.repository_owner }}/${{ secrets.MANIFESTS_REPO_NAME }}
          event-type: update-manifest
          client-payload: |-
            {
              "type": "applications",
              "name": "docs",
              "file": "Deployment.yaml",
              "spec": ".spec.template.spec.containers[0].image",
              "value": "${{ secrets.ACR_LOGIN_SERVER }}/docs:${{ needs.increment-version.outputs.new_version }}"
            }

  update-version-branch:
    name: Update Version Branch
    needs: [build]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871

      - name: Setup Git Configuration
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch Version Branch
        run: |
          git fetch origin version:version || git checkout -b version
          git checkout version

      - name: Update VERSION File
        run: |
          echo "${{ needs.increment-version.outputs.new_version }}" > VERSION

      - name: Commit and Push Updated VERSION
        run: |
          git add VERSION
          git commit -m "Increment version to ${{ needs.increment-version.outputs.new_version }}"
          git push origin version
